/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2011  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package system.process {    import core.functors.bind;        /**     * This process wraps a function in another, locking its execution scope to a specific object.     * <p><b>Example :</b></p>     * <pre class="prettyprint">     * import core.dump ;     * import system.process.Action ;     * import system.process.Bind ;     *      * var finish:Function = function( action:Action ):void     * {     *     trace ( "finish" ) ;     * }     *      * var start:Function = function( action:Action ):void     * {     *     trace ( "start" ) ;     * }     *      * var execute:Function = function( ...args:Array ):void     * {     *     trace ( this + " execute " + dump(arguments) ) ;     * }     *      * var scope:Object =      * {     *     toString : function():String     *     {     *         return "scope" ;     *     }     * };     *      * var wrapper:BindTask = new BindTask( execute, scope , "hello world" ) ;     *      * wrapper.startIt.connect( start ) ;     * wrapper.finishIt.connect( finish ) ;     *      * wrapper.run() ;     * </pre>     * @see core.functors.bind     */    public class BindTask extends Task    {        /**         * Creates a new BindTask instance.         * @param method The method invoked in this process.         * @param scope The scope of method to execute.         * @param args The optional argument to inject in the method.         */        public function BindTask( method:Function , scope:* = undefined , ...arguments:Array )        {            this.method = method ;            this.scope  = scope ;            this.args   = [].concat( arguments ) ;        }                /**         * The array of all optionals arguments to inject in the method when is executed.         */        public var args:Array ;                /**         * The method to execute.         */        public var method:Function ;                /**         * The scope reference of the function to execute.         */        public var scope:* ;                /**         * Returns a shallow copy of this object.         * @return a shallow copy of this object.         */        public override function clone():*        {            var task:BindTask = new BindTask( method, scope ) ;            task.args = [].concat(args) ;            return task ;        }                /**         * Run the process.         */        public override function run( ...arguments:Array ):void         {            notifyStarted() ;            var options:Array = [ method , scope ] ;            if ( args != null && args.length > 0 )            {                options = options.concat( args ) ;            }            bind.apply( null , options )() ;            notifyFinished() ;        }    }}