/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package system.process {    /**     * Experimental Buffer class to replace Sequencer in the next version of the system.process package.     */    public class Buffer extends CoreAction implements Startable, Stoppable    {        /**         * Creates a new Buffer instance.         * @param length The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type (null for reference types).         * @param fixed Whether the buffer length is fixed (true) or can be changed (false). This value can also be set using the fixed property.         * @param loop Specifies whether playback of the clip should continue, or loop (default false).          * @param numLoop Specifies the number of the times the presentation should loop during playback.         * @param actions A dynamic object who contains Action references to initialize the buffer.         */        public function Buffer( length:uint = 0 , fixed:Boolean = false , loop:Boolean = false , numLoop:uint = 0 , actions:* = null )        {            _buffer      = new Vector.<ActionEntry>( length , fixed ) ;            this.loop    = loop ;            this.numLoop = numLoop ;            if ( actions )            {                for each( var action:Action in actions )                {                    addAction( action as Action ) ;                }            }        }                /**         * Indicates the current Action reference in progress.         */        public function get current():Action        {            return _current.action ;        }                /**         * Indicates the current countdown loop value.         */        public function get currentLoop():uint        {            return _currentLoop ;        }                /**         * Returns the numbers of actions in the buffer.         * @return the numbers of actions in the buffer.         */        public function length():uint        {            return _buffer.length ;        }                /**         * Specifies whether playback of the buffer should continue, or loop.          * See the numLoop property to defines the number of times the buffer sequencer should be looping.          */        public var loop:Boolean ;                /**         * Specifies the number of the times the sequencer should loop during playback.         */        public var numLoop:uint ;                /**         * Insert an action in the buffer.         * @param priority Determinates the priority level of the action in the buffer.         * @param autoRemove Apply a removeAction after the first finish notification.         * @return <code class="prettyprint">true</code> if the insert is success.         */        public function addAction( action:Action , priority:uint = 0 , autoRemove:Boolean = false ):Boolean         {            if ( action )            {                action.finishIt.connect( next ) ;                _buffer.push( new ActionEntry( action , priority , autoRemove ) ) ;                shellSort(_buffer) ;                return true ;            }            return false ;        }                /**         * Returns a shallow copy of this object.         * @return a shallow copy of this object.         */        public override function clone():*        {            return new Buffer( _buffer.length , _buffer.fixed , loop , numLoop , _buffer ) ;        }                /**         * Dispose the buffer and disconnect all actions register in the buffer.         */        public function dispose():void        {            var l:int = _buffer.length ;            if ( l > 0 )            {                while( --l > -1 )                {                    (_buffer[l] as ActionEntry).action.finishIt.disconnect( next ) ;                }            }        }                /**         * Returns <code class="prettyprint">true</code> if the specified Action is register in the buffer.         * @return <code class="prettyprint">true</code> if the specified Action is register in the buffer.         */        public function hasAction( action:Action ):Boolean        {            if ( action )            {                if ( _buffer.length > 0 )                {                    var l:int = _buffer.length ;                    while( --l > -1 )                    {                        if ( ( _buffer[l] as ActionEntry ).action == action )                        {                            return true ;                        }                    }                }            }            return false ;        }                /**         * Returns <code>true</code> if the buffer is empty.         * @return <code>true</code> if the buffer is empty.         */        public function isEmpty():Boolean        {            return _buffer.length == 0 ;        }                /**         * Remove a specific action register in the buffer and if the passed-in argument is null all actions register in the buffer are removed.          * If the buffer is running the stop() method is called.         * @return <code class="prettyprint">true</code> if the method success.         */        public function removeAction( action:Action = null ):Boolean         {            stop() ;            if ( _buffer.length > 0 )            {                if ( action)                {                    var a:Action ;                    var l:int = _buffer.length ;                    while( --l > -1 )                    {                        a = (_buffer[l] as ActionEntry).action ;                        if ( a == action )                        {                            a.finishIt.disconnect( next ) ;                            _buffer.splice( l , 1 ) ;                            return true ;                        }                    }                }                else                {                    dispose() ;                    _buffer.length = 0 ;                    _current = null ;                    if ( !isLocked() )                     {                        notifyCleared() ;                    }                    return true ;                }            }            return false ;        }                /**         * Resume the buffer.         */        public function resume():void         {            if ( _stopped )            {                setRunning(true) ;                _stopped = false ;                if ( !isLocked() )                {                    notifyResumed() ;                }                next() ;            }            else            {                run() ;             }        }                /**         * Launchs the Sequencer with the first element in the internal Queue of this Sequencer.         */        public override function run( ...arguments:Array ):void         {            if ( !running )            {                notifyStarted() ;                _current     = null  ;                _stopped     = false ;                _position    = 0 ;                _currentLoop = 0 ;                next() ;            }        }                /**         * Sets the internal buffer.         * @param length The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type (null for reference types).         * @param fixed Whether the buffer length is fixed (true) or can be changed (false). This value can also be set using the fixed property.         */        public function setup( length:uint = 0, fixed:Boolean = false ):void        {             _buffer = new Vector.<Action>( length , fixed ) ;        }                /**         * Starts the buffer.         */        public function start():void         {            run() ;        }                /**         * Stops the buffer. Stop only the current action if is running.         */        public function stop():void        {            if ( running )             {                stopCurrent() ;                setRunning(false) ;                _stopped = true ;                if ( !isLocked() )                {                    notifyStopped() ;                }            }        }                /**         * Returns the Array representation of the buffer.         * @return the Array representation of the buffer.         */        public function toArray():Array        {            if ( _buffer.length > 0 )            {                var r:Array = [] ;                var l:int = _buffer.length ;                for( var i:int ; i<l ; i++ )                {                    r[i] = ( _buffer[i] as ActionEntry ).action ;                }                return r ;            }            else            {                return [] ;            }        }                /**         * Returns the Vector representation of the buffer.         * @return the Vector representation of the buffer.         */        public function toVector( fixed:Boolean = false ):Vector.<Action>        {            if ( _buffer.length > 0 )            {                var r:Vector.<Action> = new Vector.<Action>(_buffer.length, fixed) ;                var l:int = _buffer.length ;                for( var i:int ; i<l ; i++ )                {                    r[i] = ( _buffer[i] as ActionEntry ).action ;                }                return r ;            }            else            {                return new Vector.<Action>() ;            }        }                /**         * @private         */        internal var _buffer:Vector.<ActionEntry> ;                /**         * @private         */        internal var _current:ActionEntry ;                /**         * @private         */        internal var _position:int ;                /**         * @private         */        internal var _stopped:Boolean ;                /**         * Indicates if the buffer contains a next action during the process.         */        internal function hasNext():Boolean        {            return _position < _buffer.length ;        }                /**         * Run the next action in the buffer.         */        internal function next( ...args:Array ):void         {            if ( _current )            {                if ( _current.auto )                {                    _current.action.finishIt.disconnect( next ) ;                    _position -- ;                    _buffer.splice( _position , 1 ) ;                }                _current = null ;            }            if ( _buffer.length > 0 )             {                if ( hasNext() )                {                    _current = _buffer[_position++] as ActionEntry ;                    notifyProgress() ;                    if ( _current && _current.action )                    {                        _current.action.run() ;                    }                    else                    {                        next() ;                    }                }                else if ( loop )                {                    _position = 0 ;                    if( numLoop == 0 )                    {                        notifyLooped() ;                        _currentLoop = 0  ;                        next() ;                    }                    else if ( _currentLoop < numLoop )                    {                        _currentLoop ++ ;                        notifyLooped() ;                        next() ;                    }                    else                    {                        _currentLoop = 0 ;                        notifyFinished() ;                     }                }                else                {                    _currentLoop = 0 ;                    _position    = 0 ;                    notifyFinished() ;                }            }            else             {                notifyFinished() ;            }        }                /**         * Stop the current action in the buffer.         */        internal function stopCurrent():void        {            if ( _current && _current.action )            {                if ( _current.action is Stoppable )                {                    (_current.action as Stoppable).stop() ;                }                _current = null ;            }        }                /**         * @private         */        protected var _currentLoop:uint ;                /**         * Use a shell sort algorithm to sort the Vector of ActionEntry (http://en.wikipedia.org/wiki/Shell_sort). The sort method with a basic PriorityComparator.compare method failed ?         * @private         */        protected function shellSort( data:Vector.<ActionEntry> ):void         {            var temp:ActionEntry ;            var i:int ;            var j:int ;            var n:int = data.length ;            var inc:int = int( n / 2 + 0.5 ) ;            while( inc )             {                for( i = inc ; i<n ; i++)                 {                    temp = data[i] ;                     j    = i ;                    while( j >= inc && data[int(j - inc)].priority < temp.priority )                     {                        data[j] = data[int(j - inc)] ;                        j = int(j - inc);                    }                    data[j] = temp ;                }                inc = int(inc / 2.2 + 0.5);            }        }    }}