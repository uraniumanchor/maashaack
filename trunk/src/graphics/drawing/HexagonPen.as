/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.drawing {    import graphics.Align;    import graphics.geom.RegularPolygon;        import system.hack;        /**     * This pen is the tool to draw an hexagon vector shape.     * <p><b>Example :</b></p>     * <pre class="prettyprint">     * package examples      * {     *     import graphics.Align;     *     import graphics.FillStyle;     *     import graphics.drawing.HexagonPen;     *          *     import flash.display.Shape;     *     import flash.display.Sprite;     *     import flash.display.StageScaleMode;     *     import flash.events.Event;     *     import flash.events.KeyboardEvent;     *     import flash.events.MouseEvent;     *     import flash.ui.Keyboard;     *     *     public class HexagonPenExample extends Sprite      *     {     *         public function HexagonPenExample()     *         {     *             ///////////     *                  *             shape   = new Shape() ;     *             shape.x = 740 / 2 ;     *             shape.y = 420 / 2 ;     *                  *             pen      = new HexagonPen( shape , 0, 0, 40, 45, Align.TOP_RIGHT ) ;     *             pen.fill = new FillStyle( 0xFF0000 , 0.6 ) ;     *             pen.draw() ;     *                  *             addChild( shape ) ;     *                  *             ///////////     *      *             stage.scaleMode = StageScaleMode.NO_SCALE ;     *             stage.addEventListener( KeyboardEvent.KEY_DOWN , keyDown   ) ;     *             stage.addEventListener( MouseEvent.MOUSE_DOWN  , mouseDown ) ;     *             stage.addEventListener( MouseEvent.MOUSE_UP    , mouseUp   ) ;     *         }     *              *         public var pen:HexagonPen ;     *         public var shape:Shape ;     *              *         public function enterFrame( e:Event ):void     *         {     *             pen.angle += 15 ;     *             pen.draw() ;     *         }     *              *         public function keyDown( e:KeyboardEvent ):void     *         {     *             var code:uint = e.keyCode ;     *             switch( code )     *             {     *                 case Keyboard.LEFT :     *                 {     *                     pen.draw( 0, 0, 40, 0, Align.LEFT ) ;     *                     break ;     *                 }     *                 case Keyboard.RIGHT :     *                 {     *                     pen.draw( 0, 0, 40, 0, Align.RIGHT ) ;     *                     break ;     *                 }     *                 case Keyboard.UP :     *                 {     *                     pen.draw( 0, 0, 40, 0, Align.TOP ) ;     *                     break ;     *                 }     *                 case Keyboard.DOWN :     *                 {     *                     pen.useApothem = true ;     *                     pen.draw( 0, 0, 40, 0, Align.BOTTOM ) ;     *                     pen.useApothem = false ;     *                     break ;     *                 }     *                 case Keyboard.SPACE :     *                 {     *                     pen.draw( 0, 0, 40, 0, Align.CENTER ) ;     *                     break ;     *                 }     *             }     *         }     *              *         public function mouseDown( e:MouseEvent ):void     *         {     *             stage.addEventListener( Event.ENTER_FRAME , enterFrame ) ;     *         }     *              *         public function mouseUp( e:MouseEvent ):void     *         {     *             stage.removeEventListener( Event.ENTER_FRAME , enterFrame ) ;     *         }     *     }     * }     * </pre>     */    public class HexagonPen extends Pen     {        use namespace hack ;                /**         * The Pen class use composition to control a Graphics reference and draw custom vector graphic shapes.         * @param graphic The Graphics reference to control with this helper. You can passed-in a Shape or Sprite/MovieClip reference in argument.         * @param x The x location of the center of the shape relative to the registration point of the parent display object (in pixels).         * @param y The y location of the center of the circle relative to the registration point of the parent display object (in pixels).         * @param radius The radius size of the hexagon (in pixels).          * @param angle (optional) The starting angle in degrees. (defaults to 0)         * @param align The alignement value to align the shape, by default use the Align.TOP_LEFT value (10).         */        public function HexagonPen( graphic:* , x:Number = 0 , y:Number = 0 , radius:Number = 40 , angle:Number = 0 , align:uint = 10 )        {            super( graphic ) ;            setPen( x , y , radius , angle , align ) ;        }                /**         * Starting angle in degrees to draw the shape and defines the position of all the vertices (default to 0).         */        public function get angle():Number        {            return _angle ;        }                /**         * @private         */        public function set angle( value:Number ):void        {            _angle        = isNaN( value ) ? 0 : value ;            _angleRadians = _angle * deg2Rad ;        }                /**         * Determinates the size of the line segment from the center of a regular polygon to the midpoint of a side.         */        public function get apothem():Number        {            return _apothem ;        }                /**         * @private         */        public function set apothem( value:Number ):void        {            radius = RegularPolygon.radiusByApothem( value > 0 ? value : 0 , sides) ;        }                /**         * The height of the hexagon.         */        public function get height():Number        {            return _height ;        }                /**         * @private.         */        public function set height( value:Number ):void        {            radius = RegularPolygon.radiusByApothem( (value > 0 ? value : 0) / 2 , sides) ;        }                /**         * The radius size of the hexagon.         */        public function get radius():Number        {            return _radius ;        }                /**         * The radius size of the hexagon.         */        public function set radius( value:Number ):void        {            _radius  = value > 0 ? value : 0 ;            _apothem = RegularPolygon.apothemByRadius(_radius, sides) ;            _height  = 2 * _apothem ;            _width   = 2 * _radius ;        }                /**         * The width of the hexagon.         */        public function get width():Number        {            return _width ;        }                /**         * @private         */        public function set width( value:Number ):void        {            radius = (value > 0 ? value : 0) / 2 ;        }                /**         * The offset x value of the center of the circle.         */        public var x:Number ;                /**         * The offset y value of the center of the circle.         */        public var y:Number ;                /**         * Indicates if the pen use the apothem of the hexagon to draw the shape or the radius (to defines the y position).         */        public var useApothem:Boolean ;                /**         * Draws the shape.         * @param x The x location of the center of the shape relative to the registration point of the parent display object (in pixels).         * @param y The y location of the center of the circle relative to the registration point of the parent display object (in pixels).         * @param radius The radius size of the hexagon (in pixels).          * @param angle (optional) The starting angle in degrees. (defaults to 0)         * @param align The alignement value to align the shape, by default use the Align.TOP_LEFT value (10).         */        public override function draw( ...arguments:Array ):void        {            if ( arguments.length > 0 )             {                setPen.apply( this , arguments ) ;            }            super.draw() ;        }                /**         * This method contains the basic drawing shape algorithm.         */        public override function drawShape():void        {            var $x:Number = isNaN(x) ? 0 : x ;            var $y:Number = isNaN(y) ? 0 : y ;            var $h:Number = useApothem ? _apothem : _radius ;            if ( _align == Align.CENTER )             {                // default            }            else if ( _align == Align.BOTTOM )             {                $y -= $h ;            }            else if ( _align == Align.BOTTOM_LEFT )             {                $x += _radius ;                $y -= $h ;            }            else if ( _align == Align.BOTTOM_RIGHT)             {                $x -= _radius ;                $y -= $h ;            }            else if ( _align == Align.LEFT)             {                $x += _radius ;            }            else if ( _align ==  Align.RIGHT)             {                $x -= _radius ;            }            else if ( _align == Align.TOP)             {                $y += $h ;            }            else if ( _align == Align.TOP_RIGHT)             {                $x -= _radius ;                $y += $h ;            }            else // TOP_LEFT            {                $x += _radius ;                $y += $h;            }            _graphics.moveTo( $x + ( Math.cos( _angleRadians ) * _radius ), $y - ( Math.sin( _angleRadians ) * _radius ) ) ;            for ( var i:int = 1 ; i <= sides ; i++ )             {                _graphics.lineTo                (                    $x + Math.cos( _angleRadians + ( step * i ) ) * _radius ,                     $y - Math.sin( _angleRadians + ( step * i ) ) * _radius                );            }        }                /**         * Sets the pen properties.         * @param x The x location of the center of the shape relative to the registration point of the parent display object (in pixels).         * @param y The y location of the center of the circle relative to the registration point of the parent display object (in pixels).         * @param radius The radius size of the hexagon (in pixels).          * @param angle (optional) The starting angle in degrees. (defaults to 0)         * @param align The alignement value to align the shape, by default use the Align.TOP_LEFT value (10).         */        public function setPen( x:Number = 0 , y:Number = 0 , radius:Number = 40 , angle:Number = 0 , align:uint = 10  ):void        {            this.x      = isNaN(x) ? 0 : x ;            this.y      = isNaN(x) ? 0 : y ;            this.radius = radius ;             this.angle  = angle ;            this.align  = align ;        }                /**         * @private         */        hack var _angle:Number ;                /**         * @private         */        hack var _angleRadians:Number ;                 /**         * @private         */        hack var _apothem:Number ;                /**         * @private         */        hack var _height:Number ;                /**         * @private         */        hack var _radius:Number ;                /**         * @private         */        hack var _width:Number ;                /**         * @private         */        protected static const deg2Rad:Number = Math.PI / 180 ;                /**         * @private         */        protected static const sides:uint = 6 ;                /**         * Calculates span of sides.         * @private         */        protected static const step:Number  = Math.PI * 2 / 6 ;    }}