/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.colors {    import system.hack;    /**     * Manipulates and transforms <code class="prettyprint">colors</code> : CMY, CMYK, HSV, HSL, RGB, XYZ, Yxy, etc.     */    public final class Colors     {        use namespace hack ;                /**         * Returns the RGB representation of the specified CMY object.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.CMY ;         * import graphics.colors.RGB ;         *          * var cmy:CMY = new CMY( 0 , 1 , 1 ) ;         * var rgb:RGB = Colors.CMY2RGB( cmy ) ;         *          * trace( rgb ) ; // [RGB r:255 g:0 b:0 hex:0xFF0000]         * </pre>         * @return the RGB representation of the specified CMY object.         */        public static const CMY2RGB:Function = graphics.colors.CMY2RGB ;                /**         * Converts the specified CMY object in this CMYK representation.         * @return The CMYK representation of the specified CMY object.         */        public static const CMY2CMYK:Function = graphics.colors.CMY2CMYK ;                /**         * Converts the specified CMYK object in this CMY representation.         * @return The CMY representation of the specified CMYK object.         */        public static const CMYK2CMY:Function = graphics.colors.CMYK2CMY ;                /**         * Returns the RGB representation of the passed-in HSL color.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSL ;         * import graphics.colors.RGB ;         *          * var hsl:HSL = new HSL( 0 , 1 , 0.5 ) ;         * var rgb:RGB = Colors.HSL2RGB( hsl ) ;          *          * trace( rgb ) ; // [RGB r:255 g:0 b:0 hex:0xFF0000]         * </pre>         * @return the RGB representation of the passed-in HSL color.         */        public static const HSL2RGB:Function = graphics.colors.HSL2RGB ;                /**         * Returns the rgb number representation of the passed-in HSL color.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSL ;         *          * var hsl:HSL    = new HSL( 0 , 1 , 0.5 ) ;         * var rgb:Number = Colors.HSL2RGBNumber( hsl ) ;          *          * trace( rgb ) ; // 0xFF0000         * </pre>         * @return the rgb number representation of the passed-in HSL color.         */        public static const HSL2RGBNumber:Function = graphics.colors.HSL2RGBNumber ;                /**         * Returns the RGB representation of the passed-in HSV color.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSV ;         * import graphics.colors.RGB ;         *          * var hsv:HSV = new HSL( 0 , 1 , 1 ) ;         * var rgb:RGB = Colors.HSV2RGB( hsv ) ;          *          * trace( rgb ) ; // [RGB r:255 g:0 b:0 hex:0xFF0000]         * </pre>         * @return the RGB representation of the passed-in HSV color.         */        public static const HSV2RGB:Function = graphics.colors.HSV2RGB ;                /**         * Returns the rgb number representation of the passed-in HSV color.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSV ;         *          * var hsv:HSV    = new HSV( 0 , 1 , 1 ) ;         * var rgb:Number = Colors.HSV2RGBNumber( hsl ) ;          *          * trace( rgb ) ; // 0xFF0000         * </pre>         * @return the rgb number representation of the passed-in HSV color.         */        public static const HSV2RGBNumber:Function = graphics.colors.HSV2RGBNumber ;                /**         * Returns the CMY representation of the specified RGB object.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.CMY ;         * import graphics.colors.RGB ;         *          * var rgb:RGB = new RGB( 255 , 0 , 0 ) ;         * var cmy:CMY = Colors.RGB2CMY( rgb ) ;         *          * trace( cmy ) ; // [CMY c:0 m:1 y:1]         * </pre>         * @return the CMY representation of the specified RGB object.         */        public static const RGB2CMY:Function = graphics.colors.RGB2CMY ;                /**         * Returns the HSL representation of the passed-in RGB parameter.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSL ;         * import graphics.colors.RGB ;         *          * var rgb:RGB = new RGB(255,0,0)  ;         * var hsl:HSL = Colors.RGB2HSL( rgb ) ;          *          * trace( hsl ) ; // [HSL h:0 s:1 l:0.5]         * </pre>         * @return the HSL representation of the passed-in RGB parameter.         */        public static const RGB2HSL:Function = graphics.colors.RGB2HSL ;                /**         * Returns the HSV representation of the passed-in RGB parameter.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.HSV ;         * import graphics.colors.RGB ;         *          * var rgb:RGB = new RGB(255,0,0)  ;         * var hsv:HSV = Colors.RGB2HSV( rgb ) ;          *          * trace( hsv ) ; // [HSV h:0 s:1 v:1]         * </pre>         * @return the HSV representation of the passed-in RGB parameter.         */        public static const RGB2HSV:Function = graphics.colors.RGB2HSV ;                /**         * Transform the specified RGB in this XYZ representation.         * @return the XYZ representation of the passed-in RGB parameter.         */        public static const RGB2XYZ:Function = graphics.colors.RGB2XYZ ;                /**         * Returns the YUV representation of the passed-in RGB parameter.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.RGB ;         * import graphics.colors.YUV ;         *          * var rgb:RGB = new RGB(255,0,0)  ;         * var yuv:YUV = Colors.RGB2YUV( rgb ) ;          *          * trace( rgb ) ; // [RGB r:255 g:0 b:0 hex:0xFF0000]         * trace( yuv ) ; // [YUV y:76.24499999999999 u:84.97232 v:255.5]         * </pre>         * @return the YUV representation of the passed-in RGB parameter.         */        public static const RGB2YUV:Function = graphics.colors.RGB2YUV ;                /**         * Transform the specified XYZ in this RGB representation (use Observer = 2°, Illuminant = D65).         * @return the RGB representation of the passed-in XYZ parameter.         */        public static const XYZ2RGB:Function = graphics.colors.XYZ2RGB ;                /**         * Transform the specified XYZ in this Yxy representation (use Observer = 2°, Illuminant = D65).         * @return the Yxy representation of the passed-in XYZ parameter.         */        public static const XYZ2Yxy:Function = graphics.colors.XYZ2Yxy ;                /**         * Transform the specified Yxy in this XYZ representation (use Observer = 2°, Illuminant = D65).         * @return the XYZ representation of the passed-in Yxy parameter.         */        public static const Yxy2XYZ:Function = graphics.colors.Yxy2XYZ ;                /**         * Returns the RGB representation of the passed-in YUV parameter.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.colors.Colors ;         * import graphics.colors.RGB ;         * import graphics.colors.YUV ;         *          * var yuv:YUV = new YUV(76.24499999999999,84.97232,255.5)  ;         * var rgb:RGB = Colors.YUV2RGB( yuv ) ;         *          * trace( yuv ) ; // [YUV y:76.24499999999999 u:84.97232 v:255.5]         * trace( rgb ) ; // [RGB r:255 g:0 b:0 hex:0xFF0000]         * </pre>         * @return the RGB representation of the passed-in YUV parameter.         */        public static function YUV2RGB( yuv:YUV ):RGB        {            var y:Number = yuv.y ;            var u:Number = yuv.u ;            var v:Number = yuv.v ;            var r:Number = y + 1.4075 * (v - 128) ;            var g:Number = y - 0.3455 * (u - 128) - (0.7169 * (v - 128)) ;            var b:Number = y + 1.7790 * (u - 128) ;            return new RGB( r , g , b ) ;        }    }}