/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics {    import core.reflect.getClassPath;        /**     * The four cardinal directions or cardinal points are the directions of north, south, east, and west, commonly denoted by their initials: N, S, E, W.      * They are mostly used for geographic orientation on Earth but may be calculated anywhere on a rotating astronomical body.     */    public class CardinalDirection    {        /**         * Creates a new CardinalDirection instance.         * @param value The value of the enumeration.         * @param name The name key of the enumeration.         */        public function CardinalDirection( value:Number = 0 , name:String = "" )        {            _value  = value ;            _name   = name  ;            _azimut = 180 / Math.PI * value ;        }                /**         * Indicates the angular measurement in a spherical coordinate system (in degrees).         */        public function azimut():Number        {            return _azimut ;         }                /**         * Returns the source code String representation of the object.         * @return the source code String representation of the object.         */        public function toSource( indent:int = 0 ):String        {            var classname:String = getClassPath( this , true );            if( _name != "" )            {                return classname + "." + _name ;            }            return classname;        }                /**         * Returns the String representation of the object.         * @return the String representation of the object.         */        public function toString():String        {            return _name;        }                /**         * Returns the primitive value of the object.         * @return the primitive value of the object.         */        public function valueOf():Number        {            return _value;        }                /**         * @private         */        protected var _azimut:Number ;                /**         * @private         */        protected var _name:String ;                /**         * @private         */        protected var _value:Number ;                // enumerations                /**         * The East cardinal point "E" : Azimut:90° Radians:π/2         */        public static const E:CardinalDirection = new CardinalDirection( Math.PI / 2 , "E" ) ;                /**         * The East-North-East cardinal point "ENE" : Azimut:67.5° Radians:3π/8         */        public static const ENE:CardinalDirection = new CardinalDirection( 3 * Math.PI / 8 , "ENE" ) ;                /**         * The East-South-East cardinal point "ESE" : Azimut:112,5° Radians:5π/8         */        public static const ESE:CardinalDirection = new CardinalDirection( 5 * Math.PI / 8 , "ESE" ) ;                /**         * The North cardinal point "N" : Azimut:0° Radians:0         */        public static const N:CardinalDirection = new CardinalDirection( 0 , "N" ) ;                /**         * The North-East cardinal point "NE" : Azimut:45° Radians:π/4         */        public static const NE:CardinalDirection = new CardinalDirection( Math.PI / 4 , "NE" ) ;                /**         * The North-North-East cardinal point "NNE" : Azimut:22.5° Radians:π/8         */        public static const NNE:CardinalDirection = new CardinalDirection( Math.PI / 8 , "NNE" ) ;                /**         * The North-West cardinal point "NO" : Azimut:315° Radians:7π/4         */        public static const NO:CardinalDirection = new CardinalDirection( 7 * Math.PI / 4 , "NO" ) ;                /**         * The North-North-West cardinal point "NNO" : Azimut:337.5° Radians:15π/8         */        public static const NNO:CardinalDirection = new CardinalDirection( 15 * Math.PI / 8 , "NNO" ) ;        /*SE  sud-est 135°    3π/4SSE sud-sud-est 157,5°  7π/8S   sud 180°    πSSO sud-sud-ouest   202,5°  9π/8SO  sud-ouest   225°    5π/4OSO ouest-sud-ouest 247,5°  11π/8O   ouest   270°    3π/2ONO ouest-nord-ouest    292,5°  13π/8NO  nord-ouest  315°    7π/4*/    }}