<?xml version="1.0" encoding="UTF-8"?>

<!--
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is [maashaack framework].
  
  The Initial Developers of the Original Code are
  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.
  Portions created by the Initial Developers are Copyright (C) 2006-2008
  the Initial Developers. All Rights Reserved.
  
  Contributor(s):
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the LGPL or the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
-->

<project name="maashaack" default="main" basedir=".">

    <!-- timestamp of the build -->
    <tstamp>
        <format property="TODAY" pattern="dd MMMM yyyy" />
    </tstamp>
    
    <!-- user can override those properties -->
    <property file="build/user.properties"/>
    
    <!--
       contributors have to define this properties
       from the contributor.tmp file
     -->
    <available file="build/contributor.properties" property="is.contributor" />
    
    <!-- optional properties for contributors only -->
    <property file="build/contributor.properties"/>
    
    <!--
       The build is intended to compile on Windows and Mac OS X
    -->
    <condition property="FLEX_HOME" value="${FLEX_HOME_MAC}">
        <os family="mac"/>
    </condition>
    
    <condition property="FLEX_HOME" value="${FLEX_HOME_WIN}">
        <os family="windows" />
    </condition>
    
    <!-- define the asdoc executable -->
    <condition property="asdoc.exe" value="${FLEX_HOME}/bin/asdoc">
        <os family="mac" />
    </condition>
    
    <condition property="asdoc.exe" value="${FLEX_HOME}/bin/asdoc.exe">
        <os family="windows" />
    </condition>
    
    <condition property="sep" value="${SEPARATOR_MAC}">
        <os family="mac" />
    </condition>
    
    <condition property="sep" value="${SEPARATOR_WIN}">
        <os family="windows" />
    </condition>
    
    <!-- define flexTasks -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
    
    <!-- define svnAnt -->
    <taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath >
            <fileset dir="build/ant/lib" includes="**/*.jar"/>
        </classpath>
    </taskdef>
    
    <echo message="fetch subversion informations" level="verbose" />
    <!--
       load the major, minor, build version number from the AS3 common source directory
       the same properties file is used in AS3 with an include
    -->
    <property file="src/system/version.properties"/>
    <svn username="${contributor.username}" password="${contributor.password}">
        <info target="."/>
    </svn>
    <!-- define the revision number from the svn information -->
    <property name="version.revision" value="${svn.info.lastRev}"/>
    
    <!-- general properties of the project -->
    <property file="build/build.properties"/>
    
    <condition property="REDSHELL" value="${redshell.mac}">
        <os family="mac"/>
    </condition>
    
    <condition property="REDSHELL_DEBUG" value="${redshell.debug.mac}">
        <os family="mac"/>
    </condition>
    
    <condition property="REDSHELL" value="${redshell.win}">
        <os family="windows" />
    </condition>
    
    <condition property="REDSHELL_DEBUG" value="${redshell.debug.win}">
        <os family="windows" />
    </condition>
    
    <condition property="REDSHELL" value="${redshell.nix}">
        <os family="unix" />
    </condition>
    
    <condition property="REDSHELL_DEBUG" value="${redshell.debug.nix}">
        <os family="unix" />
    </condition>
    
    <!--
    <condition property="ASTUCE" value="${astuce.mac}">
        <os family="mac"/>
    </condition>
    
    <condition property="ASTUCE" value="${astuce.win}">
        <os family="windows" />
    </condition>
    
    <condition property="ASTUCE" value="${astuce.nix}">
        <os family="unix" />
    </condition>
    -->
    
    <echo message="${release.fullname} v${release.version}"/>
    
    <condition property="includesource">
        <isfalse value="${no.source}"/>
    </condition>
    
    
    <target name="clean">
        <delete dir="${release.dir}" />
        <delete dir="${release.tmp}" />
        <delete file="${x4a.src}/maashaack.abc" />
        <delete file="${x4a.src}/core.abc" />
    </target>
    
    <target name="init">
        <mkdir dir="${release.dir}" />
        <mkdir dir="${release.tmp}" />
        <!--
           export the source code to a temporary location
           to be able to manipulate some files and/or directories
         -->
        <svn>
            <export srcPath="${x4a.src}" destPath="${release.tmp.framework}" />
        	<export srcPath="${x4a.src}" destPath="${release.tmp.core}" />
        </svn>
        
        <!-- delete some files we don't want to be included in the documentation or the component -->
        <delete>
            <fileset dir="${release.tmp.framework}">
              <include name="*.as"/>
              <include name="*.mxml"/>
            </fileset>
        </delete>
        
        <delete>
            <fileset dir="${release.tmp.core}">
              <include name="*.as"/>
              <include name="*.mxml"/>
            </fileset>
        </delete>
        <delete  dir="${release.tmp.core}/libraries/" />
        <delete  dir="${release.tmp.core}/openscreen/" />
        <delete  dir="${release.tmp.core}/system/" />
        
        <!-- <delete file="${release.tmp.core}/system/foobar.as" /> -->
        
    </target>
    
    <target name="main" depends="clean,init,unit_tests,documentation,library_bytecode,library_component,templates,commonfiles,package">
    </target>
    
    <target name="clean-documentation">
        <delete dir="${asdoc.output}" />
    </target>
    
    <target name="documentation" depends="clean-documentation" description="generate the documentation with asdoc">
        <echo message="generate documentation" level="verbose" />
        <mkdir dir="${asdoc.output}" />
        
        <!-- fix permission for OSX -->
        <chmod file="${asdoc.template}/asDocHelper" perm="+x"/>
        
        <!-- run asdoc -->
        <exec executable="${asdoc.exe}">
            <arg line="-verbose-stacktraces" />
            <arg line="-doc-sources ${release.tmp.framework}" />
            <arg line="-output ${asdoc.output}" />
            <arg line="-package system 'maashaack core library'" />
            <arg line="-templates-path ${asdoc.template}" />
            <arg line="-main-title ${asdoc.main.title}" />
            <arg line="-window-title ${asdoc.window.title}" />
            <arg line="-footer ${asdoc.footer}" />
        </exec>
        
        <copy todir="${release.dir}/doc">
            <fileset dir="${asdoc.output}" />
        </copy>
        
    </target>
    
    <target name="library_bytecode" description="build the library ABC">
        <echo message="building library bytecode" level="verbose" />
        
        <exec executable="java">
            <arg line="-jar ${redshell.asc}" />
            <arg line="-AS3 -strict -md -optimize" />
            <arg line="-avmtarget 2" />
            <arg line="-import ${redshell.builtin}" />
            <arg line="-import ${redshell.toplevel}" />
            <arg line="${x4a.src}/maashaack.as" />
            
        </exec>
        
        <move file="${x4a.src}/maashaack.abc" todir="${release.dir}/lib" />
        
        <exec executable="java">
            <arg line="-jar ${redshell.asc}" />
            <arg line="-AS3 -strict -md -optimize" />
            <arg line="-avmtarget 2" />
            <arg line="-import ${redshell.builtin}" />
            <arg line="-import ${redshell.toplevel}" />
            <arg line="${x4a.src}/core.as" />
            
        </exec>
        
        <move file="${x4a.src}/core.abc" todir="${release.dir}/lib" />
        
        <!--
        <exec executable="java">
            <arg line="-jar ${redshell.asc}" />
            <arg line="-AS3 -strict -md -optimize" />
            <arg line="-avmtarget 2" />
            <arg line="-import ${redshell.builtin}" />
            <arg line="-import ${redshell.toplevel}" />
            <arg line="-import ${release.dir}/lib/maashaack.abc" />
            <arg line="${x4a.lib.ASTUce}/ASTUce.as" />
            
        </exec>
        
        <move file="${x4a.lib.ASTUce}/ASTUce.abc" todir="${x4a.libs}" />
        -->
        
    </target>
    
    <target name="library_component" description="build the Library SWC component">
        <echo message="building library component" level="verbose" />
        <!--
            iterate trough the src and generate the list of classes to insert in the component
            this way we are assured that all classes without exception will be included
            in thebytecode and no need to edit by hand a "library" class.
        -->
        <fileset id="sources" dir="${release.tmp.framework}">
            <include name="**/*.as"/>
        </fileset>
        <pathconvert property="classes" pathsep=" " refid="sources">
            <chainedmapper>
                <globmapper from="${basedir}${sep}build${sep}tmp${sep}framework${sep}*" to="*"/>
                <mapper type="package" from="*.as" to="*"/>
            </chainedmapper>
        </pathconvert>
        <echo message="classes is set to = ${classes}" level="verbose" />
        
        <!-- 
            generate the Library SWC component
            this SWC is compatible Flash and Flex
         -->
        <compc
            output="${release.dir}/lib/${x4a.swc}"
            include-classes="${classes}"
            target-player="9.0.45"
        >
            <namespace uri="${x4a.namespace}" manifest="${x4a.manifest}" />
            <include-namespaces uri="${x4a.namespace}" />
            <strict>true</strict>
            <optimize>true</optimize>
            <warnings>true</warnings>
            <verbose-stacktraces>false</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <source-path path-element="${release.tmp.framework}" />
            <external-library-path dir="${flex.libs}/player" includes="playerglobal.swc" />
            <external-library-path dir="${flex.libs}" includes="flex.swc" />
            <metadata date="${TODAY}" title="${project.name}">
                <creator name="Zwetan Kjukov" />
                <creator name="Marc Alcaraz" />
           <!-- <contributor name="Niko Bellic" /> -->
            </metadata>
        </compc>
        
        <fileset id="core_sources" dir="${release.tmp.core}">
            <include name="**/*.as"/>
        </fileset>
        <pathconvert property="core_classes" pathsep=" " refid="core_sources">
            <chainedmapper>
                <globmapper from="${basedir}${sep}build${sep}tmp${sep}core${sep}*" to="*"/>
                <mapper type="package" from="*.as" to="*"/>
            </chainedmapper>
        </pathconvert>
        <echo message="core_classes is set to = ${core_classes}" level="verbose" />
        
        <!-- 
            generate the Library SWC component
            this SWC is compatible Flash and Flex
         -->
        <compc
            output="${release.dir}/lib/${core.swc}"
            include-classes="${core_classes}"
            target-player="9.0.45"
        >
            <namespace uri="${core.namespace}" manifest="${core.manifest}" />
            <include-namespaces uri="${core.namespace}" />
            <strict>true</strict>
            <optimize>true</optimize>
            <warnings>true</warnings>
            <verbose-stacktraces>false</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <source-path path-element="${release.tmp.core}" />
            <external-library-path dir="${flex.libs}/player" includes="playerglobal.swc" />
            <external-library-path dir="${flex.libs}" includes="flex.swc" />
            <metadata date="${TODAY}" title="${project.name} (core)">
                <creator name="Zwetan Kjukov" />
                <creator name="Marc Alcaraz" />
           <!-- <contributor name="Niko Bellic" /> -->
            </metadata>
        </compc>
        
    </target>
    
    <!--
        We keep this target for documentation but we don't use it,
        here the full explanation:
        
        When we compile ASTUce CLI we embed the whole maashaack and ASTUce AS3 library
        in the executable
        with this we can update the maashaack unit tests and run them with ASTUce CLI
        but if we update the maashaack source code, the update is ignored
        because we don't know (yet) how to override the embedded maashaack.abc
        by a new maashaack.abc inside the ASTUce exe
        
        to solve that code sync problem look at src/testrunner.as
        it's a lightweight version of the ASTUce CLI that get
        compiled dynamically and is meant to be run by the redshell exe
        
        so yes we eat or own dog food :)
        but in a slightly different way than a third party project
        whith or without maashaack dependencies
        
        if you write your unit tests with ASTUce and don't care about maashaack
        just use the different ASTUce exe and the 'unit_tests_statics' setup
        
        but if your main code base link to the trunk of maashaack and you
        want the lib to be last version use the other setup 'unit_tests'
        
     -->
    <target name="unit_tests_statics" description="build and run the Library unit tests">
        
        <echo message="building library unit tests" level="verbose" />
        <mxmlc
            file="${x4a.src}/Framework_TestRunner.as"
            output="${astuce.path}/x4a-tests.swf"
            
        >
            <strict>true</strict>
            <debug>true</debug>
            <default-size width="128" height="128" />
            <source-path path-element="${release.tmp.framework}" />
            <source-path path-element="${x4a.lib}" />
            <source-path path-element="${x4a.tests}/framework" />
            <external-library-path dir="${flex.libs}/player" includes="playerglobal.swc" />
        </mxmlc>
        
        <echo message="running library unit tests" level="verbose" />
        <exec executable="${ASTUCE}" failonerror="true">
            <arg line="-s" />
            <arg line="-l:x4a-tests.swf" />
            <arg line="core.AllTests system.AllTests" />
        </exec>
        
        <delete file="${astuce.path}/x4a-tests.swf"/>
        
    </target>
    
    <target name="unit_tests" description="build and run the Library unit tests">
        
        <echo message="building library unit tests" level="verbose" />
        <mxmlc
            file="${x4a.src}/Framework_TestRunner.as"
            output="${astuce.path}/x4a-tests.swf"
            
        >
            <strict>true</strict>
            <debug>true</debug>
            <default-size width="128" height="128" />
            <source-path path-element="${release.tmp.framework}" />
            <source-path path-element="${x4a.lib.ASTUce}" />
            <source-path path-element="${x4a.tests}/framework" />
            <external-library-path dir="${flex.libs}/player" includes="playerglobal.swc" />
        </mxmlc>
        
        <echo message="building ASTUce exe dynamically" level="verbose" />
        <exec executable="java">
            <arg line="-jar ${redshell.asc}" />
            <arg line="-AS3 -strict -md -optimize" />
            <arg line="-avmtarget 2" />
            <arg line="-exe ${REDSHELL_DEBUG}" />
            <arg line="-import ${redshell.builtin}" />
            <arg line="-import ${redshell.toplevel}" />
            <arg line="${astuce.path}/ASTUce.as" />
            
        </exec>
        
        <chmod file="${astuce.path}/ASTUce.exe" perm="+x"/>
        
        <echo message="running library unit tests" level="verbose" />
        <exec executable="${astuce.path}/ASTUce.exe" failonerror="true">
            <arg line="-s" />
            <arg line="-l:x4a-tests.swf" />
            <arg line="core.AllTests system.AllTests" />
        </exec>
        
        <delete file="${astuce.path}/x4a-tests.swf"/>
        <delete file="${astuce.path}/ASTUce.abc"/>
        <delete file="${astuce.path}/ASTUce.exe"/>
        
    </target>
    
    <!--
        parse the templates for the release
        can be use also to generate samples, mxml, as, etc.
    -->
    <target name="templates" description="generate files from templates">
        <filter token="project_name" value="${project.name}"/>
        <filter token="project_shortname" value="${project.shortname}"/>
        <filter token="project_fullname" value="${project.fullname}"/>
        <filter token="project_url" value="${project.url}"/>
        <filter token="project_svn" value="${project.svn}"/>
        <filter token="project_wiki" value="${project.wiki}"/>
        <filter token="project_group" value="${project.group}"/>
        <filter token="project_maintenance" value="${project.maintenance}"/>
        <filter token="release_version" value="${release.version}"/>
        <copy file="${x4a.template}/readme.txt" todir="${release.dir}" filtering="true" />
    </target>
    
    <!-- include the source code in the release -->
    <target name="include-source" if="includesource">
        <copy todir="${release.dir}/src">
            <fileset dir="${release.tmp.framework}"/>
        </copy>
    </target>
    
    <!-- add common files to the release -->
    <target name="commonfiles" depends="include-source" description="copy common files">
        <copy file="changelog.txt" todir="${release.dir}" />
        <copy file="license.txt" todir="${release.dir}" />
    </target>
    
    <!-- package the release to a versioned zip file -->
    <target name="package" description="package the release for distribution" unless="no.package">
        <echo message="generate release zip" level="verbose" />
        <zip destfile="${release.dir}/${release.zipname}"
             basedir="${release.dir}" 
        />
        
        <delete includeemptydirs="true">
            <fileset dir="${release.dir}" includes="**/*" excludes="${release.zipname}" defaultexcludes="false"/>
        </delete>
        
    </target>
    
    <!-- reset the build to its default state -->
    <target name="reset" depends="clean,clean-documentation" description="to reset the build to its default state" >
    </target>
    
    <!-- documentation of the build -->
    <target name="help" description="documentation of the build">
        <echo message="the release files will appears in ${release.dir}/" />
        <echo message="" />
        <echo message="a) to build a normal release (default)" />
        <echo message="   doc + component (no source code) packaged in a zip" />
        <echo message="   ant main, ant" />
        <echo message="" />
        <echo message="b) to build a test release" />
        <echo message="   doc + component (not zipped)" />
        <echo message="   ant -Dno.package=true" />
        <echo message="" />
        <echo message="c) to reset the build to its default state" />
        <echo message="   ant reset" />
        <echo message="" />
        <echo message="d) to build a dev release" />
        <echo message="   doc + component + source code" />
        <echo message="   ant -Dno.source=false" />
        <echo message="" />
        <echo message="z) you can combine different options" />
        <echo message="   ant -Dno.source=false -Dno.package=true" />
        <echo message="   will generate /lib /doc /src without packaging them as zip" />
        <echo message="" />
    </target>
    
</project>