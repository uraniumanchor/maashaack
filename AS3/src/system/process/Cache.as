/*Version: MPL 1.1/GPL 2.0/LGPL 2.1 The contents of this file are subject to the Mozilla Public License Version1.1 (the "License"); you may not use this file except in compliance withthe License. You may obtain a copy of the License athttp://www.mozilla.org/MPL/  Software distributed under the License is distributed on an "AS IS" basis,WITHOUT WARRANTY OF ANY KIND, either express or implied. See the Licensefor the specific language governing rights and limitations under theLicense.  The Original Code is [maashaack framework].  The Initial Developers of the Original Code areZwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.Portions created by the Initial Developers are Copyright (C) 2006-2009the Initial Developers. All Rights Reserved.  Contributor(s):  Alternatively, the contents of this file may be used under the terms ofeither the GNU General Public License Version 2 or later (the "GPL"), orthe GNU Lesser General Public License Version 2.1 or later (the "LGPL"),in which case the provisions of the GPL or the LGPL are applicable insteadof those above. If you wish to allow use of your version of this file onlyunder the terms of either the GPL or the LGPL, and not to allow others touse your version of this file under the terms of the MPL, indicate yourdecision by deleting the provisions above and replace them with the noticeand other provisions required by the LGPL or the GPL. If you do not deletethe provisions above, a recipient may use your version of this file underthe terms of any one of the MPL, the GPL or the LGPL.*/package system.process {    import system.Cloneable;    import system.data.Queue;    import system.data.queues.LinearQueue;    import system.process.Runnable;    import system.process.cache.Attribute;    import system.process.cache.Method;    /**     * Enqueue in a buffer a stack (LIFO) of commands to invoke with the specified target object.     */    public class Cache implements Cloneable, Runnable     {        use namespace cache;                /**         * Creates a new Cache instance.         */        public function Cache( target:* = null )        {            _queue = new LinearQueue() ;            this.target = target ;        }                /**         * The scope of the object.         */        public var target:* ;                /**         * Removes all commands in memory.         */        public function clear():void        {           _queue.clear() ;        }                /**         * Creates and returns a shallow copy of the object.         * @return A new object that is a shallow copy of this instance.         */            public function clone():*        {            var c:Cache = new Cache(target) ;            c._queue = this._queue.clone() ;            return c ;        }                /**         * Retrieves, but does not remove, the head of this queue.         */        public function element():*        {            return _queue.element();        }                /**         * Enqueues an attribute name/value entry.         */        public function enqueueAttribute( name:String , value:* ):Boolean        {            if ( name == null )            {                return false ;            }            return _queue.enqueue( new Attribute( name , value ) ) ;        }                /**         * Enqueues a method definition.         * @param name The name of the method.         * @param arguments The Array of all arguments passed-in the method.         * @param rest The optional Array reference of rest arguments passed-in the method (if the method use a ..rest definition).         */        public function enqueueMethod( name:String , arguments:Array , rest:Array = null ):Boolean        {            if ( name == null )            {                return false ;            }            var args:Array = arguments ;            if ( rest != null )            {                args = (args || []).concat( rest ) ;            }            return _queue.enqueue( new Method( name , arguments ) ) ;        }                /**         * Indicates if the tracker cache is empty.         */        public function isEmpty():Boolean        {           return _queue.isEmpty();        }                /**         * Flush and invoke all the commands in memory.         */        public function run(...arguments:Array):void        {            if ( target == null )            {                return;            }            var l:int = size() ;            if ( l > 0 )            {                var ar:Array = _queue.toArray() ;                var item:* ;                var name:String;                for (var i:int ; i<l ; i++)                {                    item = ar.shift() ;                    if ( item is Method )                    {                        name = (item as Method).name ;                        if ( name != null && name in target )                        {                            if ( target[name] is Function )                            {                                (target[name] as Function).apply(target, (item as Method).arguments) ;                            }                        }                        else if ( item is Attribute )                        {                            name  = (item as Attribute).name ;                            if ( name != null && name in target )                            {                                target[name] = (item as Attribute).value ;                            }                        }                    }                }            }        }                /**         * Returns the number of commands in memory.         * @return the number of commands in memory.         */        public function size():uint        {            return _queue.size();         }                /**         * @private         */        public namespace cache;                /**         * @private         */        cache var _queue:Queue ;    }}