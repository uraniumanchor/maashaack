/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2009  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.colors {    import buRRRn.ASTUce.framework.TestCase;        import system.numeric.Mathematics;        public class ColorsTest extends TestCase     {        public function ColorsTest(name:String = "")        {            super(name);        }                public function testCMY2RGB():void        {            var cmy:CMY ;            var rgb:RGB ;                        cmy = new CMY( 0 , 0 , 0 ) ;            rgb = Colors.CMY2RGB( cmy ) ;            assertEquals( rgb , new RGB(255,255,255) , "01 - Colors.CMY2RGB method failed." ) ;                        cmy = new CMY( 1 , 1 , 1 ) ;            rgb = Colors.CMY2RGB( cmy ) ;            assertEquals( rgb , new RGB(0,0,0) , "02 - Colors.CMY2RGB method failed." ) ;                        cmy = new CMY( 0 , 1 , 1 ) ;            rgb = Colors.CMY2RGB( cmy ) ;            assertEquals( rgb , new RGB(255,0,0) , "03 - Colors.CMY2RGB method failed." ) ;        }                public function testCMY2CMYK():void        {            var cmy:CMY ;            var cmyk:CMYK ;                        cmy  = new CMY(0,0,0);            cmyk = Colors.CMY2CMYK(cmy);            assertEquals( cmyk , new CMYK(0,0,0,0) , "01 - Colors.CMY2CMYK failed." ) ;                        cmy  = new CMY(1,1,1);            cmyk = Colors.CMY2CMYK(cmy);            assertEquals( cmyk , new CMYK(0,0,0,1) , "02 - Colors.CMY2CMYK failed." ) ;          }                public function testCMYK2CMY():void        {            var cmy:CMY ;            var cmyk:CMYK ;                        cmyk = new CMYK( 0 , 0 , 0 , 0 ) ;            cmy  = Colors.CMYK2CMY( cmyk );            assertEquals( cmy , new CMY(0,0,0) , "01 - Colors.CMYK2CMY failed." ) ;                        cmyk = new CMYK( 0 , 0 , 0 , 1 ) ;            cmy  = Colors.CMYK2CMY( cmyk );            assertEquals( cmy , new CMY(1,1,1) , "02 - Colors.CMYK2CMY failed." ) ;        }                public function testHSL2RGB():void        {            var hsl:HSL ;                        hsl = new HSL( 0 , 1 , 0.5 ) ;            assertEquals( Colors.HSL2RGB( hsl ) , new RGB(0xFF,0x00,0x00) , "01 - Colors.HSL2RGB method failed.") ;                        hsl = new HSL( 120 , 1, 0.5 ) ;            assertEquals( Colors.HSL2RGB( hsl ) , new RGB(0x00,0xFF,0x00) , "02 - Colors.HSL2RGB method failed.") ;                        hsl = new HSL( 240 , 1 , 0.5 ) ;            assertEquals( Colors.HSL2RGB( hsl ) , new RGB(0x00,0x00,0xFF) , "03 - Colors.HSL2RGB method failed.") ;        }                public function testHSL2RGBNumber():void        {            var hsl:HSL    ;            var rgb:Number ;                        hsl = new HSL( 0 , 1 , 0.5 ) ;            rgb = Colors.HSL2RGBNumber( hsl ) ;            assertEquals( rgb , 0xFF0000 , "01 - Colors.HSL2RGBNumber method failed : " + rgb ) ;                        hsl = new HSL( 120 , 1, 0.5 ) ;            rgb = Colors.HSL2RGBNumber( hsl ) ;            assertEquals( rgb , 0x00FF00 , "02 - Colors.HSL2RGBNumber method failed : " + rgb + " / " + 0x00FF00 ) ;                        hsl = new HSL( 240 , 1 , 0.5 ) ;            rgb = Colors.HSL2RGBNumber( hsl ) ;            assertEquals( rgb , 0x0000FF , "03 - Colors.HSL2RGBNumber method failed : " + rgb ) ;        }                public function testHSV2RGB():void        {            var hsv:HSV ;            var rgb:RGB ;                        hsv = new HSV( 0 , 1 , 1 ) ;            rgb = Colors.HSV2RGB( hsv ) ;            assertEquals(rgb.r , 255 , "01-01 toRGB method failed.") ;            assertEquals(rgb.g , 0   , "01-02 toRGB method failed.") ;            assertEquals(rgb.b , 0   , "01-03 toRGB method failed.") ;                        hsv = new HSV( 120 , 0.5 ,1 ) ;            rgb = Colors.HSV2RGB( hsv ) ;            assertEquals(rgb.r , 127 , "02-01 toRGB method failed.") ;            assertEquals(rgb.g , 255 , "02-02 toRGB method failed.") ;            assertEquals(rgb.b , 127 , "02-03 toRGB method failed.") ;                        hsv = new HSV( 240 , 1 , 0.5 ) ;            rgb = Colors.HSV2RGB( hsv ) ;            assertEquals(rgb.r , 0   , "03-01 toRGB method failed.") ;            assertEquals(rgb.g , 0   , "03-02 toRGB method failed.") ;            assertEquals(rgb.b , 127 , "03-03 toRGB method failed.") ;        }                public function testHSV2RGBNumber():void        {            var hsv:HSV    ;            var rgb:Number ;                        hsv = new HSV( 0 , 1 , 1 ) ;            rgb = Colors.HSV2RGBNumber( hsv ) ;            assertEquals( rgb , 0xFF0000 , "01 - Colors.HSV2RGBNumber method failed.") ;                        hsv = new HSV( 120 , 0.5 ,1 ) ;            rgb = Colors.HSV2RGBNumber( hsv ) ;            assertEquals( rgb , 0x7FFF7F , "02 - Colors.HSV2RGBNumber method failed.") ;                        hsv = new HSV( 240 , 1 , 0.5 ) ;            rgb = Colors.HSV2RGBNumber( hsv ) ;            assertEquals( rgb , 0x00007F , "03 - Colors.HSV2RGBNumber method failed.") ;        }                public function testNumber2RGB():void         {           var rgb:RGB = new RGB() ;                      rgb = Colors.Number2RGB( 0xEA6F51 ) ;           assertEquals(  rgb , new RGB( 234 , 111 , 81 ) , "01 - Colors.Number2RGB failed.") ;                       rgb = Colors.Number2RGB( 0xFFFFFF ) ;           assertEquals(  rgb , new RGB( 255 , 255 , 255 ) , "02 - Colors.Number2RGB failed.") ;                      rgb = Colors.Number2RGB( 0 ) ;           assertEquals(  rgb , new RGB( 0 , 0 , 0 )       , "03 - Colors.Number2RGB failed.") ;        }                 public function testNumber2RGBA():void         {           var rgb:RGBA = new RGBA() ;                      rgb = Colors.Number2RGBA( 0xFFEA6F51 ) ;           assertEquals(  rgb , new RGBA( 234 , 111 , 81 , 1 ) , "01 - Colors.Number2RGBA failed.") ;                       rgb = Colors.Number2RGBA( 0xFFFFFFFF ) ;           assertEquals(  rgb , new RGBA( 255 , 255 , 255 , 1 ) , "02 - Colors.Number2RGBA failed.") ;                      rgb = Colors.Number2RGBA( 0 ) ;           assertEquals(  rgb , new RGBA( 0 , 0 , 0 , 0 ) , "03 - Colors.Number2RGBA failed.") ;        }                 public function testRGB2CMY():void        {            var cmy:CMY ;            var rgb:RGB ;                        rgb = new RGB(255,255,255) ;            cmy = Colors.RGB2CMY( rgb ) ;            assertEquals( cmy , new CMY( 0 , 0 , 0 ) , "01 - Colors.RGB2CMY method failed." ) ;                        rgb = new RGB(0,0,0) ;            cmy = Colors.RGB2CMY( rgb ) ;            assertEquals( cmy , new CMY( 1 , 1 , 1 ) , "02 - Colors.RGB2CMY method failed." ) ;                        rgb = new RGB(255,0,0) ;            cmy = Colors.RGB2CMY( rgb ) ;            assertEquals( cmy , new CMY( 0 , 1 , 1 ) , "03 - Colors.RGB2CMY method failed." ) ;        }                public function testRGBA2Number():void         {           assertEquals( Colors.RGBA2Number(170,170,170,0.6), 0x99AAAAAA , "01 - Colors.RGBA2Number failed.") ;           assertEquals( Colors.RGBA2Number(255,255,255,1)  , 0xFFFFFFFF , "02 - Colors.RGBA2Number failed.") ;           assertEquals( Colors.RGBA2Number(0,0,0,0)        , 0x00000000 , "03 - Colors.RGBA2Number failed.") ;        }                public function testRGB2HSL():void        {            var rgb:RGB ;            var hsl:HSL ;                        rgb = new RGB(255,0,0) ;            assertEquals( Colors.RGB2HSL(rgb) , new HSL(0,1,0.5) , "01 - Colors.RGB2HSL(rgb) failed.") ;                        rgb = new RGB(127.5,255,127.5) ;            hsl = Colors.RGB2HSL(rgb) ;            // approximation problems            assertEquals( Math.round(hsl.h)           , 120    , "02-01 - Colors.RGB2HSL(rgb) failed.") ;             assertEquals( hsl.s                       ,   1    , "02-02 - Colors.RGB2HSL(rgb) failed.") ;            assertEquals( Mathematics.round(hsl.l, 2) ,   0.75 , "02-03 - Colors.RGB2HSL(rgb) failed.") ;                        rgb = new RGB( 0 , 0 , 127.5 ) ;            hsl = Colors.RGB2HSL(rgb) ;            // approximation problems            assertEquals( Math.round(hsl.h)           , 240    , "03-01 - Colors.RGB2HSL(rgb) failed.") ;             assertEquals( hsl.s                       ,   1    , "03-02 - Colors.RGB2HSL(rgb) failed.") ;            assertEquals( Mathematics.round(hsl.l, 2) ,   0.25 , "03-03 - Colors.RGB2HSL(rgb) failed.") ;        }                public function testRGB2HSV():void        {            var rgb:RGB ;                        rgb = new RGB(255,255,255) ;            assertEquals( Colors.RGB2HSV(rgb) , new HSV(0,0,1) , "01 - Colors.RGB2HSV(rgb) failed.") ;                        rgb = new RGB(255,0,0) ;            assertEquals( Colors.RGB2HSV(rgb) , new HSV(0,1,1) , "02 - Colors.RGB2HSV(rgb) failed.") ;                        rgb = new RGB(0,255,0) ;            assertEquals( Colors.RGB2HSV(rgb) , new HSV(120,1,1) , "03 - Colors.RGB2HSV(rgb) failed.") ;                        rgb = new RGB(0,0,255) ;            assertEquals( Colors.RGB2HSV(rgb) , new HSV(240,1,1) , "04 - Colors.RGB2HSV(rgb) failed.") ;                        rgb = new RGB(0,0,0) ;            assertEquals( Colors.RGB2HSV(rgb) , new HSV(0,0,0) , "05 - Colors.RGB2HSV(rgb) failed.") ;        }                public function testRGB2Number():void         {           assertEquals( Colors.RGB2Number(234,111,81)  , 0xEA6F51 , "01 - Colors.RGB2Number failed.") ;           assertEquals( Colors.RGB2Number(255,255,255) , 0xFFFFFF , "02 - Colors.RGB2Number failed.") ;           assertEquals( Colors.RGB2Number(0,0,0)       , 0x000000 , "03 - Colors.RGB2Number failed.") ;        }                public function testRGB2XYZ():void         {            var rgb:RGB = new RGB( 10, 10, 10) ;            var xyz:XYZ = Colors.RGB2XYZ( rgb ) ; //                         assertEquals( xyz.X , 0.28850239786317    , "01 - Colors.RGB2XYZ failed with the X property.") ;            assertEquals( xyz.Y , 0.3035269835488375  , "02 - Colors.RGB2XYZ failed with the Y property.") ;            assertEquals( xyz.Z , 0.33054088508468404 , "03 - Colors.RGB2XYZ failed with the Z property.") ;        }                 public function testRGB2YUV():void        {            var rgb:RGB = new RGB(255,0,0)  ;            var yuv:YUV = Colors.RGB2YUV( rgb ) ;             assertEquals( yuv , new YUV(76.24499999999999,84.97232,255.5) , "Colors.RGB2YUV failed.") ;        }                public function testXYZ2RGB():void         {            var xyz:XYZ = new XYZ(0.28850239786317,0.3035269835488375,0.33054088508468404) ;            var rgb:RGB = Colors.XYZ2RGB(xyz) ;            assertEquals( rgb.r , 10 , "01 - Colors.XYZ2RGB failed with the X property.") ;            assertEquals( rgb.g , 10 , "02 - Colors.XYZ2RGB failed with the Y property.") ;            assertEquals( rgb.b , 10 , "03 - Colors.XYZ2RGB failed with the Z property.") ;        }                public function testXYZ2Yxy():void        {            var xyz:XYZ = new XYZ(100,25,125) ;            var result:Yxy = Colors.XYZ2Yxy(xyz) ;            assertEquals( result , new Yxy(25,0.4,0.1) , "Colors.XYZ2Yxy failed.") ;        }                public function testYUV2RGB2():void        {            var yuv:YUV = new YUV(76.24499999999999,84.97232,255.5) ;            var rgb:RGB = Colors.YUV2RGB( yuv ) ;             assertEquals( rgb , new RGB(255,0,0)  , "Colors.YUV2RGB failed.") ;        }                public function testYxy2XYZ():void        {            var yxy:Yxy = new Yxy(25,0.4,0.1)  ;            var result:XYZ = Colors.Yxy2XYZ(yxy) ;            assertEquals( result , new XYZ(100,25,125) , "Colors.Yxy2XYZ failed.") ;        }    }}